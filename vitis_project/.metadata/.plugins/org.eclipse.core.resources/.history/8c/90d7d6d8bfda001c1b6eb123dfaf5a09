/*
 * 
 * main.c
 *  
 */

#include <stdio.h>
#include "xil_printf.h"
#include "xil_io.h"
#include "xparameters.h"

void exec(UINTPTR baseAddr, u32 ins)
{
    // Write instruction to control register 1
    CONTROLLER_mWriteReg(baseAddr, 4, ins);

    // Write start signal to control register 0
    CONTROLLER_mWriteReg(baseAddr, 0, 1);
#include "xparameters.h"
    printf("Before: %lx\n", Xil_In32(XPAR_AXI_GPIO_0_BASEADDR));

    // Busy waiting for execution
    while (CONTROLLER_mReadReg(baseAddr, 0));
    printf("After: %lx\n", Xil_In32(XPAR_AXI_GPIO_0_BASEADDR));
    printf("After: %lx\n", Xil_In32(XPAR_AXI_GPIO_0_BASEADDR));
    printf("After: %lx\n", Xil_In32(XPAR_AXI_GPIO_0_BASEADDR));
    printf("After: %lx\n", Xil_In32(XPAR_AXI_GPIO_0_BASEADDR));
    printf("After: %lx\n", Xil_In32(XPAR_AXI_GPIO_0_BASEADDR));

    return;
}

u32 codegen(unsigned alumode, unsigned opmode, unsigned inmode,
            unsigned bram1waddr, unsigned bram1raddr, unsigned bram0raddr)
{
    u32 ins = 0;
    ins |= (alumode & 0b1111) << 27;
    ins |= (opmode & 0b1111111) << 20;
    ins |= (inmode & 0b11111) << 15;
    ins |= (bram1waddr & 0b11111) << 10;
    ins |= (bram1raddr & 0b11111) << 5;
    ins |= (bram0raddr & 0b11111) << 0;
    ins |= 0x80000000;  // set Execute
    return ins;
}

void dump_bram()
{
	for (int i = 0; i < 33; ++i) {
		u32 a, b;
		a = Xil_In32(XPAR_AXI_BRAM_CTRL_0_S_AXI_BASEADDR + 4 * i);
		b = Xil_In32(XPAR_AXI_BRAM_CTRL_1_S_AXI_BASEADDR + 4 * i);
		printf("BRAM[%d] = %lx \t \t \t SuperBRAM[%d] = %lx\n", i, a, i, b);
	}
}


int main()
{
	printf("Program Start.\n");
	
	// BRAM1[3] <= BRAM0[0] * BRAM1[2] ;
	// BRAM1[7] <= BRAM0[11] * BRAM1[3] ;
	// BRAM1[10] <= BRAM0[31] * BRAM1[7] + C ;
	// BRAM1[13] <= C - BRAM0[1] * BRAM1[6] ;
	// BRAM1[15] <= BRAM0[0] * BRAM1[31] - C - 1 ;

	// u32 data1, data2, result;
	printf("===== Initial BRAM values =====\n");
	dump_bram();
	exec(XPAR_CONTROLLER_0_S00_AXI_BASEADDR,
		 codegen(0, 0b0000101, 0b10001, 3 + 1, 2 + 1, 0 + 1)); // alumode = 0000, opmode = 0000101, inmode = 10001, bram1wAddr = 4*3, bram1rAddr = 4*2, bram0rAddr = 4*0;

	// data1 = Xil_In32(XPAR_AXI_BRAM_CTRL_0_S_AXI_BASEADDR);
	// data2 = Xil_In32(XPAR_AXI_BRAM_CTRL_1_S_AXI_BASEADDR + 8);
	// result = Xil_In32(XPAR_AXI_BRAM_CTRL_1_S_AXI_BASEADDR + 12);
	// printf("data1 = %lx, data2 = %lx, result = %lx\n", data1, data2, result);
    printf("\n===== After exec =====\n");
	dump_bram();


	/*exec(XPAR_CONTROLLER_0_S00_AXI_BASEADDR,
		 codegen(0, 0b0000101, 0b10001, 7, 3, 11)); // alumode = 0000, opmode = 0000101, inmode = 10001, bram1wAddr = 4*7, bram1rAddr = 4*3, bram0rAddr = 4*11;

	data1 = Xil_In32(XPAR_AXI_BRAM_CTRL_0_S_AXI_BASEADDR + 44);
	data2 = Xil_In32(XPAR_AXI_BRAM_CTRL_1_S_AXI_BASEADDR + 12);
	result = Xil_In32(XPAR_AXI_BRAM_CTRL_1_S_AXI_BASEADDR + 28);
	printf("data1 = %lx, data2 = %lx, result = %lx\n",data1, data2, result);*/



	/*exec(XPAR_CONTROLLER_0_S00_AXI_BASEADDR,
		 codegen(0, 0x0110101, 0x10001, 40, 28, 124)); // alumode = 0000, opmode = 0110101, inmode = 10001, bram1wAddr = 4*10, bram1rAddr = 4*7, bram0rAddr = 4*31;
	exec(XPAR_CONTROLLER_0_S00_AXI_BASEADDR,
		 codegen(0x0011, 0x0110101, 0x10001, 52, 24, 4)); // alumode = 0011, opmode = 0110101, inmode = 10001, bram1wAddr = 4*13, bram1rAddr = 4*6, bram0rAddr = 4*1;
	exec(XPAR_CONTROLLER_0_S00_AXI_BASEADDR,
		 codegen(0x0001, 0x0110101, 0x10001, 60, 124, 0)); // alumode = 0001, opmode = 0110101, inmode = 10001, bram1wAddr = 4*15, bram1rAddr = 4*31, bram0rAddr = 4*0;
	
	for(int i = 0; i < 32; i++)
	{
		u32 Offset = i*4;
		u32 data = Xil_In32(XPAR_AXI_BRAM_CTRL_1_S_AXI_BASEADDR + Offset);
		printf("BRAM1[%d] = %x\n", i, data);
	}*/
	
	//printf("\n------------------------second times------------------------\n\n");

	/* write data in BRAM1 by C code */
	/*for(int i = 0; i < 32; i++)
	{
		u32 wdata = (i+1)^2;
		u32 Offset = i*4;
		Xil_Out32(XPAR_AXI_BRAM_CTRL_1_S_AXI_BASEADDR + Offset, wdata);
	}*/
	
	// BRAM1[16] <= BRAM0[0] * BRAM1[2] ;
	// BRAM1[17] <= BRAM0[11] * BRAM1[3] ;
	// BRAM1[18] <= BRAM0[31] * BRAM1[7] + C ;
	// BRAM1[19] <= C - BRAM0[1] * BRAM1[6] ;
	// BRAM1[20] <= BRAM0[0] * BRAM1[31] - C - 1 ;
	/*exec(XPAR_CONTROLLER_0_S00_AXI_BASEADDR,
		 codegen(0, 0x0000101, 0x10001, 64, 8, 0)); // alumode = 0000, opmode = 0000101, inmode = 10001, bram1wAddr = 4*16, bram1rAddr = 4*2, bram0rAddr = 4*0;
	exec(XPAR_CONTROLLER_0_S00_AXI_BASEADDR,
		 codegen(0, 0x0000101, 0x10001, 68, 12, 44)); // alumode = 0000, opmode = 0000101, inmode = 10001, bram1wAddr = 4*17, bram1rAddr = 4*3, bram0rAddr = 4*11;
	exec(XPAR_CONTROLLER_0_S00_AXI_BASEADDR,
		 codegen(0, 0x0110101, 0x10001, 72, 28, 124)); // alumode = 0000, opmode = 0110101, inmode = 10001, bram1wAddr = 4*18, bram1rAddr = 4*7, bram0rAddr = 4*31;
	exec(XPAR_CONTROLLER_0_S00_AXI_BASEADDR,
		 codegen(0x0011, 0x0110101, 0x10001, 76, 24, 4)); // alumode = 0011, opmode = 0110101, inmode = 10001, bram1wAddr = 4*19, bram1rAddr = 4*6, bram0rAddr = 4*1;
	exec(XPAR_CONTROLLER_0_S00_AXI_BASEADDR,
		 codegen(0x0001, 0x0110101, 0x10001, 80, 124, 0)); // alumode = 0001, opmode = 0110101, inmode = 10001, bram1wAddr = 4*20, bram1rAddr = 4*31, bram0rAddr = 4*0;
	
	for(int i = 0; i < 32; i++)
	{
		u32 Offset = i*4;
		u32 data = Xil_In32(XPAR_AXI_BRAM_CTRL_1_S_AXI_BASEADDR + Offset);
		printf("BRAM1[%d] = %x\n\r", i, data);
	}*/
	
	printf("Program End.\n\r");
    return 0;
}
